// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageTaskDeliver.proto

#ifndef PROTOBUF_MessageTaskDeliver_2eproto__INCLUDED
#define PROTOBUF_MessageTaskDeliver_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MessageTaskDeliver_2eproto();
void protobuf_AssignDesc_MessageTaskDeliver_2eproto();
void protobuf_ShutdownFile_MessageTaskDeliver_2eproto();

class MessagePipe;
class MessagePipeline;
class MessageTaskDeliver;

// ===================================================================

class MessagePipe : public ::google::protobuf::Message {
 public:
  MessagePipe();
  virtual ~MessagePipe();

  MessagePipe(const MessagePipe& from);

  inline MessagePipe& operator=(const MessagePipe& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessagePipe& default_instance();

  void Swap(MessagePipe* other);

  // implements Message ----------------------------------------------

  MessagePipe* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessagePipe& from);
  void MergeFrom(const MessagePipe& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string executor = 3;
  inline bool has_executor() const;
  inline void clear_executor();
  static const int kExecutorFieldNumber = 3;
  inline const ::std::string& executor() const;
  inline void set_executor(const ::std::string& value);
  inline void set_executor(const char* value);
  inline void set_executor(const char* value, size_t size);
  inline ::std::string* mutable_executor();
  inline ::std::string* release_executor();
  inline void set_allocated_executor(::std::string* executor);

  // required bool multipleInput = 4;
  inline bool has_multipleinput() const;
  inline void clear_multipleinput();
  static const int kMultipleInputFieldNumber = 4;
  inline bool multipleinput() const;
  inline void set_multipleinput(bool value);

  // required bool multipleThread = 5;
  inline bool has_multiplethread() const;
  inline void clear_multiplethread();
  static const int kMultipleThreadFieldNumber = 5;
  inline bool multiplethread() const;
  inline void set_multiplethread(bool value);

  // repeated string parameters = 6;
  inline int parameters_size() const;
  inline void clear_parameters();
  static const int kParametersFieldNumber = 6;
  inline const ::std::string& parameters(int index) const;
  inline ::std::string* mutable_parameters(int index);
  inline void set_parameters(int index, const ::std::string& value);
  inline void set_parameters(int index, const char* value);
  inline void set_parameters(int index, const char* value, size_t size);
  inline ::std::string* add_parameters();
  inline void add_parameters(const ::std::string& value);
  inline void add_parameters(const char* value);
  inline void add_parameters(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& parameters() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_parameters();

  // @@protoc_insertion_point(class_scope:MessagePipe)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_executor();
  inline void clear_has_executor();
  inline void set_has_multipleinput();
  inline void clear_has_multipleinput();
  inline void set_has_multiplethread();
  inline void clear_has_multiplethread();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* name_;
  ::std::string* executor_;
  ::google::protobuf::RepeatedPtrField< ::std::string> parameters_;
  bool multipleinput_;
  bool multiplethread_;
  friend void  protobuf_AddDesc_MessageTaskDeliver_2eproto();
  friend void protobuf_AssignDesc_MessageTaskDeliver_2eproto();
  friend void protobuf_ShutdownFile_MessageTaskDeliver_2eproto();

  void InitAsDefaultInstance();
  static MessagePipe* default_instance_;
};
// -------------------------------------------------------------------

class MessagePipeline : public ::google::protobuf::Message {
 public:
  MessagePipeline();
  virtual ~MessagePipeline();

  MessagePipeline(const MessagePipeline& from);

  inline MessagePipeline& operator=(const MessagePipeline& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessagePipeline& default_instance();

  void Swap(MessagePipeline* other);

  // implements Message ----------------------------------------------

  MessagePipeline* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessagePipeline& from);
  void MergeFrom(const MessagePipeline& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // repeated .MessagePipe pipes = 3;
  inline int pipes_size() const;
  inline void clear_pipes();
  static const int kPipesFieldNumber = 3;
  inline const ::MessagePipe& pipes(int index) const;
  inline ::MessagePipe* mutable_pipes(int index);
  inline ::MessagePipe* add_pipes();
  inline const ::google::protobuf::RepeatedPtrField< ::MessagePipe >&
      pipes() const;
  inline ::google::protobuf::RepeatedPtrField< ::MessagePipe >*
      mutable_pipes();

  // @@protoc_insertion_point(class_scope:MessagePipeline)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::MessagePipe > pipes_;
  friend void  protobuf_AddDesc_MessageTaskDeliver_2eproto();
  friend void protobuf_AssignDesc_MessageTaskDeliver_2eproto();
  friend void protobuf_ShutdownFile_MessageTaskDeliver_2eproto();

  void InitAsDefaultInstance();
  static MessagePipeline* default_instance_;
};
// -------------------------------------------------------------------

class MessageTaskDeliver : public ::google::protobuf::Message {
 public:
  MessageTaskDeliver();
  virtual ~MessageTaskDeliver();

  MessageTaskDeliver(const MessageTaskDeliver& from);

  inline MessageTaskDeliver& operator=(const MessageTaskDeliver& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageTaskDeliver& default_instance();

  void Swap(MessageTaskDeliver* other);

  // implements Message ----------------------------------------------

  MessageTaskDeliver* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MessageTaskDeliver& from);
  void MergeFrom(const MessageTaskDeliver& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // repeated string resources = 2;
  inline int resources_size() const;
  inline void clear_resources();
  static const int kResourcesFieldNumber = 2;
  inline const ::std::string& resources(int index) const;
  inline ::std::string* mutable_resources(int index);
  inline void set_resources(int index, const ::std::string& value);
  inline void set_resources(int index, const char* value);
  inline void set_resources(int index, const char* value, size_t size);
  inline ::std::string* add_resources();
  inline void add_resources(const ::std::string& value);
  inline void add_resources(const char* value);
  inline void add_resources(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& resources() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_resources();

  // repeated string input = 3;
  inline int input_size() const;
  inline void clear_input();
  static const int kInputFieldNumber = 3;
  inline const ::std::string& input(int index) const;
  inline ::std::string* mutable_input(int index);
  inline void set_input(int index, const ::std::string& value);
  inline void set_input(int index, const char* value);
  inline void set_input(int index, const char* value, size_t size);
  inline ::std::string* add_input();
  inline void add_input(const ::std::string& value);
  inline void add_input(const char* value);
  inline void add_input(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& input() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_input();

  // repeated string servants = 4;
  inline int servants_size() const;
  inline void clear_servants();
  static const int kServantsFieldNumber = 4;
  inline const ::std::string& servants(int index) const;
  inline ::std::string* mutable_servants(int index);
  inline void set_servants(int index, const ::std::string& value);
  inline void set_servants(int index, const char* value);
  inline void set_servants(int index, const char* value, size_t size);
  inline ::std::string* add_servants();
  inline void add_servants(const ::std::string& value);
  inline void add_servants(const char* value);
  inline void add_servants(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& servants() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_servants();

  // required .MessagePipeline pipeline = 5;
  inline bool has_pipeline() const;
  inline void clear_pipeline();
  static const int kPipelineFieldNumber = 5;
  inline const ::MessagePipeline& pipeline() const;
  inline ::MessagePipeline* mutable_pipeline();
  inline ::MessagePipeline* release_pipeline();
  inline void set_allocated_pipeline(::MessagePipeline* pipeline);

  // required bool isParallel = 6;
  inline bool has_isparallel() const;
  inline void clear_isparallel();
  static const int kIsParallelFieldNumber = 6;
  inline bool isparallel() const;
  inline void set_isparallel(bool value);

  // required string originalID = 7;
  inline bool has_originalid() const;
  inline void clear_originalid();
  static const int kOriginalIDFieldNumber = 7;
  inline const ::std::string& originalid() const;
  inline void set_originalid(const ::std::string& value);
  inline void set_originalid(const char* value);
  inline void set_originalid(const char* value, size_t size);
  inline ::std::string* mutable_originalid();
  inline ::std::string* release_originalid();
  inline void set_allocated_originalid(::std::string* originalid);

  // @@protoc_insertion_point(class_scope:MessageTaskDeliver)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_pipeline();
  inline void clear_has_pipeline();
  inline void set_has_isparallel();
  inline void clear_has_isparallel();
  inline void set_has_originalid();
  inline void clear_has_originalid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> resources_;
  ::google::protobuf::RepeatedPtrField< ::std::string> input_;
  ::google::protobuf::RepeatedPtrField< ::std::string> servants_;
  ::MessagePipeline* pipeline_;
  ::std::string* originalid_;
  bool isparallel_;
  friend void  protobuf_AddDesc_MessageTaskDeliver_2eproto();
  friend void protobuf_AssignDesc_MessageTaskDeliver_2eproto();
  friend void protobuf_ShutdownFile_MessageTaskDeliver_2eproto();

  void InitAsDefaultInstance();
  static MessageTaskDeliver* default_instance_;
};
// ===================================================================


// ===================================================================

// MessagePipe

// required string id = 1;
inline bool MessagePipe::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessagePipe::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessagePipe::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessagePipe::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& MessagePipe::id() const {
  // @@protoc_insertion_point(field_get:MessagePipe.id)
  return *id_;
}
inline void MessagePipe::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:MessagePipe.id)
}
inline void MessagePipe::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:MessagePipe.id)
}
inline void MessagePipe::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MessagePipe.id)
}
inline ::std::string* MessagePipe::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MessagePipe.id)
  return id_;
}
inline ::std::string* MessagePipe::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessagePipe::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MessagePipe.id)
}

// required string name = 2;
inline bool MessagePipe::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessagePipe::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessagePipe::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessagePipe::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MessagePipe::name() const {
  // @@protoc_insertion_point(field_get:MessagePipe.name)
  return *name_;
}
inline void MessagePipe::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:MessagePipe.name)
}
inline void MessagePipe::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:MessagePipe.name)
}
inline void MessagePipe::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MessagePipe.name)
}
inline ::std::string* MessagePipe::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MessagePipe.name)
  return name_;
}
inline ::std::string* MessagePipe::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessagePipe::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MessagePipe.name)
}

// required string executor = 3;
inline bool MessagePipe::has_executor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MessagePipe::set_has_executor() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MessagePipe::clear_has_executor() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MessagePipe::clear_executor() {
  if (executor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    executor_->clear();
  }
  clear_has_executor();
}
inline const ::std::string& MessagePipe::executor() const {
  // @@protoc_insertion_point(field_get:MessagePipe.executor)
  return *executor_;
}
inline void MessagePipe::set_executor(const ::std::string& value) {
  set_has_executor();
  if (executor_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    executor_ = new ::std::string;
  }
  executor_->assign(value);
  // @@protoc_insertion_point(field_set:MessagePipe.executor)
}
inline void MessagePipe::set_executor(const char* value) {
  set_has_executor();
  if (executor_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    executor_ = new ::std::string;
  }
  executor_->assign(value);
  // @@protoc_insertion_point(field_set_char:MessagePipe.executor)
}
inline void MessagePipe::set_executor(const char* value, size_t size) {
  set_has_executor();
  if (executor_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    executor_ = new ::std::string;
  }
  executor_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MessagePipe.executor)
}
inline ::std::string* MessagePipe::mutable_executor() {
  set_has_executor();
  if (executor_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    executor_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MessagePipe.executor)
  return executor_;
}
inline ::std::string* MessagePipe::release_executor() {
  clear_has_executor();
  if (executor_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = executor_;
    executor_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessagePipe::set_allocated_executor(::std::string* executor) {
  if (executor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete executor_;
  }
  if (executor) {
    set_has_executor();
    executor_ = executor;
  } else {
    clear_has_executor();
    executor_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MessagePipe.executor)
}

// required bool multipleInput = 4;
inline bool MessagePipe::has_multipleinput() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MessagePipe::set_has_multipleinput() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MessagePipe::clear_has_multipleinput() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MessagePipe::clear_multipleinput() {
  multipleinput_ = false;
  clear_has_multipleinput();
}
inline bool MessagePipe::multipleinput() const {
  // @@protoc_insertion_point(field_get:MessagePipe.multipleInput)
  return multipleinput_;
}
inline void MessagePipe::set_multipleinput(bool value) {
  set_has_multipleinput();
  multipleinput_ = value;
  // @@protoc_insertion_point(field_set:MessagePipe.multipleInput)
}

// required bool multipleThread = 5;
inline bool MessagePipe::has_multiplethread() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MessagePipe::set_has_multiplethread() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MessagePipe::clear_has_multiplethread() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MessagePipe::clear_multiplethread() {
  multiplethread_ = false;
  clear_has_multiplethread();
}
inline bool MessagePipe::multiplethread() const {
  // @@protoc_insertion_point(field_get:MessagePipe.multipleThread)
  return multiplethread_;
}
inline void MessagePipe::set_multiplethread(bool value) {
  set_has_multiplethread();
  multiplethread_ = value;
  // @@protoc_insertion_point(field_set:MessagePipe.multipleThread)
}

// repeated string parameters = 6;
inline int MessagePipe::parameters_size() const {
  return parameters_.size();
}
inline void MessagePipe::clear_parameters() {
  parameters_.Clear();
}
inline const ::std::string& MessagePipe::parameters(int index) const {
  // @@protoc_insertion_point(field_get:MessagePipe.parameters)
  return parameters_.Get(index);
}
inline ::std::string* MessagePipe::mutable_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:MessagePipe.parameters)
  return parameters_.Mutable(index);
}
inline void MessagePipe::set_parameters(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:MessagePipe.parameters)
  parameters_.Mutable(index)->assign(value);
}
inline void MessagePipe::set_parameters(int index, const char* value) {
  parameters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MessagePipe.parameters)
}
inline void MessagePipe::set_parameters(int index, const char* value, size_t size) {
  parameters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MessagePipe.parameters)
}
inline ::std::string* MessagePipe::add_parameters() {
  return parameters_.Add();
}
inline void MessagePipe::add_parameters(const ::std::string& value) {
  parameters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MessagePipe.parameters)
}
inline void MessagePipe::add_parameters(const char* value) {
  parameters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MessagePipe.parameters)
}
inline void MessagePipe::add_parameters(const char* value, size_t size) {
  parameters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MessagePipe.parameters)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MessagePipe::parameters() const {
  // @@protoc_insertion_point(field_list:MessagePipe.parameters)
  return parameters_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MessagePipe::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:MessagePipe.parameters)
  return &parameters_;
}

// -------------------------------------------------------------------

// MessagePipeline

// required string id = 1;
inline bool MessagePipeline::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessagePipeline::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessagePipeline::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessagePipeline::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& MessagePipeline::id() const {
  // @@protoc_insertion_point(field_get:MessagePipeline.id)
  return *id_;
}
inline void MessagePipeline::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:MessagePipeline.id)
}
inline void MessagePipeline::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:MessagePipeline.id)
}
inline void MessagePipeline::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MessagePipeline.id)
}
inline ::std::string* MessagePipeline::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MessagePipeline.id)
  return id_;
}
inline ::std::string* MessagePipeline::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessagePipeline::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MessagePipeline.id)
}

// required string name = 2;
inline bool MessagePipeline::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MessagePipeline::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MessagePipeline::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MessagePipeline::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MessagePipeline::name() const {
  // @@protoc_insertion_point(field_get:MessagePipeline.name)
  return *name_;
}
inline void MessagePipeline::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:MessagePipeline.name)
}
inline void MessagePipeline::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:MessagePipeline.name)
}
inline void MessagePipeline::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MessagePipeline.name)
}
inline ::std::string* MessagePipeline::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MessagePipeline.name)
  return name_;
}
inline ::std::string* MessagePipeline::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessagePipeline::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MessagePipeline.name)
}

// repeated .MessagePipe pipes = 3;
inline int MessagePipeline::pipes_size() const {
  return pipes_.size();
}
inline void MessagePipeline::clear_pipes() {
  pipes_.Clear();
}
inline const ::MessagePipe& MessagePipeline::pipes(int index) const {
  // @@protoc_insertion_point(field_get:MessagePipeline.pipes)
  return pipes_.Get(index);
}
inline ::MessagePipe* MessagePipeline::mutable_pipes(int index) {
  // @@protoc_insertion_point(field_mutable:MessagePipeline.pipes)
  return pipes_.Mutable(index);
}
inline ::MessagePipe* MessagePipeline::add_pipes() {
  // @@protoc_insertion_point(field_add:MessagePipeline.pipes)
  return pipes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MessagePipe >&
MessagePipeline::pipes() const {
  // @@protoc_insertion_point(field_list:MessagePipeline.pipes)
  return pipes_;
}
inline ::google::protobuf::RepeatedPtrField< ::MessagePipe >*
MessagePipeline::mutable_pipes() {
  // @@protoc_insertion_point(field_mutable_list:MessagePipeline.pipes)
  return &pipes_;
}

// -------------------------------------------------------------------

// MessageTaskDeliver

// required string id = 1;
inline bool MessageTaskDeliver::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MessageTaskDeliver::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MessageTaskDeliver::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MessageTaskDeliver::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& MessageTaskDeliver::id() const {
  // @@protoc_insertion_point(field_get:MessageTaskDeliver.id)
  return *id_;
}
inline void MessageTaskDeliver::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:MessageTaskDeliver.id)
}
inline void MessageTaskDeliver::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:MessageTaskDeliver.id)
}
inline void MessageTaskDeliver::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MessageTaskDeliver.id)
}
inline ::std::string* MessageTaskDeliver::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MessageTaskDeliver.id)
  return id_;
}
inline ::std::string* MessageTaskDeliver::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageTaskDeliver::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MessageTaskDeliver.id)
}

// repeated string resources = 2;
inline int MessageTaskDeliver::resources_size() const {
  return resources_.size();
}
inline void MessageTaskDeliver::clear_resources() {
  resources_.Clear();
}
inline const ::std::string& MessageTaskDeliver::resources(int index) const {
  // @@protoc_insertion_point(field_get:MessageTaskDeliver.resources)
  return resources_.Get(index);
}
inline ::std::string* MessageTaskDeliver::mutable_resources(int index) {
  // @@protoc_insertion_point(field_mutable:MessageTaskDeliver.resources)
  return resources_.Mutable(index);
}
inline void MessageTaskDeliver::set_resources(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:MessageTaskDeliver.resources)
  resources_.Mutable(index)->assign(value);
}
inline void MessageTaskDeliver::set_resources(int index, const char* value) {
  resources_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MessageTaskDeliver.resources)
}
inline void MessageTaskDeliver::set_resources(int index, const char* value, size_t size) {
  resources_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MessageTaskDeliver.resources)
}
inline ::std::string* MessageTaskDeliver::add_resources() {
  return resources_.Add();
}
inline void MessageTaskDeliver::add_resources(const ::std::string& value) {
  resources_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MessageTaskDeliver.resources)
}
inline void MessageTaskDeliver::add_resources(const char* value) {
  resources_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MessageTaskDeliver.resources)
}
inline void MessageTaskDeliver::add_resources(const char* value, size_t size) {
  resources_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MessageTaskDeliver.resources)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MessageTaskDeliver::resources() const {
  // @@protoc_insertion_point(field_list:MessageTaskDeliver.resources)
  return resources_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MessageTaskDeliver::mutable_resources() {
  // @@protoc_insertion_point(field_mutable_list:MessageTaskDeliver.resources)
  return &resources_;
}

// repeated string input = 3;
inline int MessageTaskDeliver::input_size() const {
  return input_.size();
}
inline void MessageTaskDeliver::clear_input() {
  input_.Clear();
}
inline const ::std::string& MessageTaskDeliver::input(int index) const {
  // @@protoc_insertion_point(field_get:MessageTaskDeliver.input)
  return input_.Get(index);
}
inline ::std::string* MessageTaskDeliver::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:MessageTaskDeliver.input)
  return input_.Mutable(index);
}
inline void MessageTaskDeliver::set_input(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:MessageTaskDeliver.input)
  input_.Mutable(index)->assign(value);
}
inline void MessageTaskDeliver::set_input(int index, const char* value) {
  input_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MessageTaskDeliver.input)
}
inline void MessageTaskDeliver::set_input(int index, const char* value, size_t size) {
  input_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MessageTaskDeliver.input)
}
inline ::std::string* MessageTaskDeliver::add_input() {
  return input_.Add();
}
inline void MessageTaskDeliver::add_input(const ::std::string& value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MessageTaskDeliver.input)
}
inline void MessageTaskDeliver::add_input(const char* value) {
  input_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MessageTaskDeliver.input)
}
inline void MessageTaskDeliver::add_input(const char* value, size_t size) {
  input_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MessageTaskDeliver.input)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MessageTaskDeliver::input() const {
  // @@protoc_insertion_point(field_list:MessageTaskDeliver.input)
  return input_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MessageTaskDeliver::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:MessageTaskDeliver.input)
  return &input_;
}

// repeated string servants = 4;
inline int MessageTaskDeliver::servants_size() const {
  return servants_.size();
}
inline void MessageTaskDeliver::clear_servants() {
  servants_.Clear();
}
inline const ::std::string& MessageTaskDeliver::servants(int index) const {
  // @@protoc_insertion_point(field_get:MessageTaskDeliver.servants)
  return servants_.Get(index);
}
inline ::std::string* MessageTaskDeliver::mutable_servants(int index) {
  // @@protoc_insertion_point(field_mutable:MessageTaskDeliver.servants)
  return servants_.Mutable(index);
}
inline void MessageTaskDeliver::set_servants(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:MessageTaskDeliver.servants)
  servants_.Mutable(index)->assign(value);
}
inline void MessageTaskDeliver::set_servants(int index, const char* value) {
  servants_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:MessageTaskDeliver.servants)
}
inline void MessageTaskDeliver::set_servants(int index, const char* value, size_t size) {
  servants_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MessageTaskDeliver.servants)
}
inline ::std::string* MessageTaskDeliver::add_servants() {
  return servants_.Add();
}
inline void MessageTaskDeliver::add_servants(const ::std::string& value) {
  servants_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:MessageTaskDeliver.servants)
}
inline void MessageTaskDeliver::add_servants(const char* value) {
  servants_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:MessageTaskDeliver.servants)
}
inline void MessageTaskDeliver::add_servants(const char* value, size_t size) {
  servants_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:MessageTaskDeliver.servants)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MessageTaskDeliver::servants() const {
  // @@protoc_insertion_point(field_list:MessageTaskDeliver.servants)
  return servants_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MessageTaskDeliver::mutable_servants() {
  // @@protoc_insertion_point(field_mutable_list:MessageTaskDeliver.servants)
  return &servants_;
}

// required .MessagePipeline pipeline = 5;
inline bool MessageTaskDeliver::has_pipeline() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MessageTaskDeliver::set_has_pipeline() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MessageTaskDeliver::clear_has_pipeline() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MessageTaskDeliver::clear_pipeline() {
  if (pipeline_ != NULL) pipeline_->::MessagePipeline::Clear();
  clear_has_pipeline();
}
inline const ::MessagePipeline& MessageTaskDeliver::pipeline() const {
  // @@protoc_insertion_point(field_get:MessageTaskDeliver.pipeline)
  return pipeline_ != NULL ? *pipeline_ : *default_instance_->pipeline_;
}
inline ::MessagePipeline* MessageTaskDeliver::mutable_pipeline() {
  set_has_pipeline();
  if (pipeline_ == NULL) pipeline_ = new ::MessagePipeline;
  // @@protoc_insertion_point(field_mutable:MessageTaskDeliver.pipeline)
  return pipeline_;
}
inline ::MessagePipeline* MessageTaskDeliver::release_pipeline() {
  clear_has_pipeline();
  ::MessagePipeline* temp = pipeline_;
  pipeline_ = NULL;
  return temp;
}
inline void MessageTaskDeliver::set_allocated_pipeline(::MessagePipeline* pipeline) {
  delete pipeline_;
  pipeline_ = pipeline;
  if (pipeline) {
    set_has_pipeline();
  } else {
    clear_has_pipeline();
  }
  // @@protoc_insertion_point(field_set_allocated:MessageTaskDeliver.pipeline)
}

// required bool isParallel = 6;
inline bool MessageTaskDeliver::has_isparallel() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MessageTaskDeliver::set_has_isparallel() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MessageTaskDeliver::clear_has_isparallel() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MessageTaskDeliver::clear_isparallel() {
  isparallel_ = false;
  clear_has_isparallel();
}
inline bool MessageTaskDeliver::isparallel() const {
  // @@protoc_insertion_point(field_get:MessageTaskDeliver.isParallel)
  return isparallel_;
}
inline void MessageTaskDeliver::set_isparallel(bool value) {
  set_has_isparallel();
  isparallel_ = value;
  // @@protoc_insertion_point(field_set:MessageTaskDeliver.isParallel)
}

// required string originalID = 7;
inline bool MessageTaskDeliver::has_originalid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MessageTaskDeliver::set_has_originalid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MessageTaskDeliver::clear_has_originalid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MessageTaskDeliver::clear_originalid() {
  if (originalid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    originalid_->clear();
  }
  clear_has_originalid();
}
inline const ::std::string& MessageTaskDeliver::originalid() const {
  // @@protoc_insertion_point(field_get:MessageTaskDeliver.originalID)
  return *originalid_;
}
inline void MessageTaskDeliver::set_originalid(const ::std::string& value) {
  set_has_originalid();
  if (originalid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    originalid_ = new ::std::string;
  }
  originalid_->assign(value);
  // @@protoc_insertion_point(field_set:MessageTaskDeliver.originalID)
}
inline void MessageTaskDeliver::set_originalid(const char* value) {
  set_has_originalid();
  if (originalid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    originalid_ = new ::std::string;
  }
  originalid_->assign(value);
  // @@protoc_insertion_point(field_set_char:MessageTaskDeliver.originalID)
}
inline void MessageTaskDeliver::set_originalid(const char* value, size_t size) {
  set_has_originalid();
  if (originalid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    originalid_ = new ::std::string;
  }
  originalid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:MessageTaskDeliver.originalID)
}
inline ::std::string* MessageTaskDeliver::mutable_originalid() {
  set_has_originalid();
  if (originalid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    originalid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:MessageTaskDeliver.originalID)
  return originalid_;
}
inline ::std::string* MessageTaskDeliver::release_originalid() {
  clear_has_originalid();
  if (originalid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = originalid_;
    originalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MessageTaskDeliver::set_allocated_originalid(::std::string* originalid) {
  if (originalid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete originalid_;
  }
  if (originalid) {
    set_has_originalid();
    originalid_ = originalid;
  } else {
    clear_has_originalid();
    originalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:MessageTaskDeliver.originalID)
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MessageTaskDeliver_2eproto__INCLUDED
