// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MessageTaskDeliver.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MessageTaskDeliver.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MessagePipe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessagePipe_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessagePipeline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessagePipeline_reflection_ = NULL;
const ::google::protobuf::Descriptor* MessageTaskDeliver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MessageTaskDeliver_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MessageTaskDeliver_2eproto() {
  protobuf_AddDesc_MessageTaskDeliver_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MessageTaskDeliver.proto");
  GOOGLE_CHECK(file != NULL);
  MessagePipe_descriptor_ = file->message_type(0);
  static const int MessagePipe_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePipe, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePipe, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePipe, executor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePipe, multipleinput_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePipe, multiplethread_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePipe, parameters_),
  };
  MessagePipe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessagePipe_descriptor_,
      MessagePipe::default_instance_,
      MessagePipe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePipe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePipe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessagePipe));
  MessagePipeline_descriptor_ = file->message_type(1);
  static const int MessagePipeline_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePipeline, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePipeline, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePipeline, pipes_),
  };
  MessagePipeline_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessagePipeline_descriptor_,
      MessagePipeline::default_instance_,
      MessagePipeline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePipeline, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessagePipeline, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessagePipeline));
  MessageTaskDeliver_descriptor_ = file->message_type(2);
  static const int MessageTaskDeliver_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageTaskDeliver, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageTaskDeliver, resources_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageTaskDeliver, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageTaskDeliver, servants_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageTaskDeliver, pipeline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageTaskDeliver, isparallel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageTaskDeliver, originalid_),
  };
  MessageTaskDeliver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MessageTaskDeliver_descriptor_,
      MessageTaskDeliver::default_instance_,
      MessageTaskDeliver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageTaskDeliver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MessageTaskDeliver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MessageTaskDeliver));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MessageTaskDeliver_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessagePipe_descriptor_, &MessagePipe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessagePipeline_descriptor_, &MessagePipeline::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MessageTaskDeliver_descriptor_, &MessageTaskDeliver::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MessageTaskDeliver_2eproto() {
  delete MessagePipe::default_instance_;
  delete MessagePipe_reflection_;
  delete MessagePipeline::default_instance_;
  delete MessagePipeline_reflection_;
  delete MessageTaskDeliver::default_instance_;
  delete MessageTaskDeliver_reflection_;
}

void protobuf_AddDesc_MessageTaskDeliver_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030MessageTaskDeliver.proto\"|\n\013MessagePip"
    "e\022\n\n\002id\030\001 \002(\t\022\014\n\004name\030\002 \002(\t\022\020\n\010executor\030"
    "\003 \002(\t\022\025\n\rmultipleInput\030\004 \002(\010\022\026\n\016multiple"
    "Thread\030\005 \002(\010\022\022\n\nparameters\030\006 \003(\t\"H\n\017Mess"
    "agePipeline\022\n\n\002id\030\001 \002(\t\022\014\n\004name\030\002 \002(\t\022\033\n"
    "\005pipes\030\003 \003(\0132\014.MessagePipe\"\240\001\n\022MessageTa"
    "skDeliver\022\n\n\002id\030\001 \002(\t\022\021\n\tresources\030\002 \003(\t"
    "\022\r\n\005input\030\003 \003(\t\022\020\n\010servants\030\004 \003(\t\022\"\n\010pip"
    "eline\030\005 \002(\0132\020.MessagePipeline\022\022\n\nisParal"
    "lel\030\006 \002(\010\022\022\n\noriginalID\030\007 \002(\t", 389);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MessageTaskDeliver.proto", &protobuf_RegisterTypes);
  MessagePipe::default_instance_ = new MessagePipe();
  MessagePipeline::default_instance_ = new MessagePipeline();
  MessageTaskDeliver::default_instance_ = new MessageTaskDeliver();
  MessagePipe::default_instance_->InitAsDefaultInstance();
  MessagePipeline::default_instance_->InitAsDefaultInstance();
  MessageTaskDeliver::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MessageTaskDeliver_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MessageTaskDeliver_2eproto {
  StaticDescriptorInitializer_MessageTaskDeliver_2eproto() {
    protobuf_AddDesc_MessageTaskDeliver_2eproto();
  }
} static_descriptor_initializer_MessageTaskDeliver_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MessagePipe::kIdFieldNumber;
const int MessagePipe::kNameFieldNumber;
const int MessagePipe::kExecutorFieldNumber;
const int MessagePipe::kMultipleInputFieldNumber;
const int MessagePipe::kMultipleThreadFieldNumber;
const int MessagePipe::kParametersFieldNumber;
#endif  // !_MSC_VER

MessagePipe::MessagePipe()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessagePipe)
}

void MessagePipe::InitAsDefaultInstance() {
}

MessagePipe::MessagePipe(const MessagePipe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessagePipe)
}

void MessagePipe::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  executor_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  multipleinput_ = false;
  multiplethread_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessagePipe::~MessagePipe() {
  // @@protoc_insertion_point(destructor:MessagePipe)
  SharedDtor();
}

void MessagePipe::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (executor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete executor_;
  }
  if (this != default_instance_) {
  }
}

void MessagePipe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessagePipe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessagePipe_descriptor_;
}

const MessagePipe& MessagePipe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTaskDeliver_2eproto();
  return *default_instance_;
}

MessagePipe* MessagePipe::default_instance_ = NULL;

MessagePipe* MessagePipe::New() const {
  return new MessagePipe;
}

void MessagePipe::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<MessagePipe*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(multipleinput_, multiplethread_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_executor()) {
      if (executor_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        executor_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  parameters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessagePipe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessagePipe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_executor;
        break;
      }

      // required string executor = 3;
      case 3: {
        if (tag == 26) {
         parse_executor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_executor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->executor().data(), this->executor().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "executor");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_multipleInput;
        break;
      }

      // required bool multipleInput = 4;
      case 4: {
        if (tag == 32) {
         parse_multipleInput:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &multipleinput_)));
          set_has_multipleinput();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_multipleThread;
        break;
      }

      // required bool multipleThread = 5;
      case 5: {
        if (tag == 40) {
         parse_multipleThread:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &multiplethread_)));
          set_has_multiplethread();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_parameters;
        break;
      }

      // repeated string parameters = 6;
      case 6: {
        if (tag == 50) {
         parse_parameters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_parameters()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parameters(this->parameters_size() - 1).data(),
            this->parameters(this->parameters_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "parameters");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_parameters;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MessagePipe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessagePipe)
  return false;
#undef DO_
}

void MessagePipe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessagePipe)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // required string executor = 3;
  if (has_executor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->executor().data(), this->executor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "executor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->executor(), output);
  }

  // required bool multipleInput = 4;
  if (has_multipleinput()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->multipleinput(), output);
  }

  // required bool multipleThread = 5;
  if (has_multiplethread()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->multiplethread(), output);
  }

  // repeated string parameters = 6;
  for (int i = 0; i < this->parameters_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->parameters(i).data(), this->parameters(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "parameters");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->parameters(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessagePipe)
}

::google::protobuf::uint8* MessagePipe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessagePipe)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string executor = 3;
  if (has_executor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->executor().data(), this->executor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "executor");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->executor(), target);
  }

  // required bool multipleInput = 4;
  if (has_multipleinput()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->multipleinput(), target);
  }

  // required bool multipleThread = 5;
  if (has_multiplethread()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->multiplethread(), target);
  }

  // repeated string parameters = 6;
  for (int i = 0; i < this->parameters_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parameters(i).data(), this->parameters(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "parameters");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->parameters(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessagePipe)
  return target;
}

int MessagePipe::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string executor = 3;
    if (has_executor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->executor());
    }

    // required bool multipleInput = 4;
    if (has_multipleinput()) {
      total_size += 1 + 1;
    }

    // required bool multipleThread = 5;
    if (has_multiplethread()) {
      total_size += 1 + 1;
    }

  }
  // repeated string parameters = 6;
  total_size += 1 * this->parameters_size();
  for (int i = 0; i < this->parameters_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->parameters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessagePipe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessagePipe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessagePipe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessagePipe::MergeFrom(const MessagePipe& from) {
  GOOGLE_CHECK_NE(&from, this);
  parameters_.MergeFrom(from.parameters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_executor()) {
      set_executor(from.executor());
    }
    if (from.has_multipleinput()) {
      set_multipleinput(from.multipleinput());
    }
    if (from.has_multiplethread()) {
      set_multiplethread(from.multiplethread());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessagePipe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessagePipe::CopyFrom(const MessagePipe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagePipe::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void MessagePipe::Swap(MessagePipe* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(executor_, other->executor_);
    std::swap(multipleinput_, other->multipleinput_);
    std::swap(multiplethread_, other->multiplethread_);
    parameters_.Swap(&other->parameters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessagePipe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessagePipe_descriptor_;
  metadata.reflection = MessagePipe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessagePipeline::kIdFieldNumber;
const int MessagePipeline::kNameFieldNumber;
const int MessagePipeline::kPipesFieldNumber;
#endif  // !_MSC_VER

MessagePipeline::MessagePipeline()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessagePipeline)
}

void MessagePipeline::InitAsDefaultInstance() {
}

MessagePipeline::MessagePipeline(const MessagePipeline& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessagePipeline)
}

void MessagePipeline::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessagePipeline::~MessagePipeline() {
  // @@protoc_insertion_point(destructor:MessagePipeline)
  SharedDtor();
}

void MessagePipeline::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MessagePipeline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessagePipeline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessagePipeline_descriptor_;
}

const MessagePipeline& MessagePipeline::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTaskDeliver_2eproto();
  return *default_instance_;
}

MessagePipeline* MessagePipeline::default_instance_ = NULL;

MessagePipeline* MessagePipeline::New() const {
  return new MessagePipeline;
}

void MessagePipeline::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }
  pipes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessagePipeline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessagePipeline)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pipes;
        break;
      }

      // repeated .MessagePipe pipes = 3;
      case 3: {
        if (tag == 26) {
         parse_pipes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pipes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_pipes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MessagePipeline)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessagePipeline)
  return false;
#undef DO_
}

void MessagePipeline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessagePipeline)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .MessagePipe pipes = 3;
  for (int i = 0; i < this->pipes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->pipes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessagePipeline)
}

::google::protobuf::uint8* MessagePipeline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessagePipeline)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .MessagePipe pipes = 3;
  for (int i = 0; i < this->pipes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->pipes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessagePipeline)
  return target;
}

int MessagePipeline::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .MessagePipe pipes = 3;
  total_size += 1 * this->pipes_size();
  for (int i = 0; i < this->pipes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pipes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessagePipeline::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessagePipeline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessagePipeline*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessagePipeline::MergeFrom(const MessagePipeline& from) {
  GOOGLE_CHECK_NE(&from, this);
  pipes_.MergeFrom(from.pipes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessagePipeline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessagePipeline::CopyFrom(const MessagePipeline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagePipeline::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->pipes())) return false;
  return true;
}

void MessagePipeline::Swap(MessagePipeline* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    pipes_.Swap(&other->pipes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessagePipeline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessagePipeline_descriptor_;
  metadata.reflection = MessagePipeline_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MessageTaskDeliver::kIdFieldNumber;
const int MessageTaskDeliver::kResourcesFieldNumber;
const int MessageTaskDeliver::kInputFieldNumber;
const int MessageTaskDeliver::kServantsFieldNumber;
const int MessageTaskDeliver::kPipelineFieldNumber;
const int MessageTaskDeliver::kIsParallelFieldNumber;
const int MessageTaskDeliver::kOriginalIDFieldNumber;
#endif  // !_MSC_VER

MessageTaskDeliver::MessageTaskDeliver()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:MessageTaskDeliver)
}

void MessageTaskDeliver::InitAsDefaultInstance() {
  pipeline_ = const_cast< ::MessagePipeline*>(&::MessagePipeline::default_instance());
}

MessageTaskDeliver::MessageTaskDeliver(const MessageTaskDeliver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:MessageTaskDeliver)
}

void MessageTaskDeliver::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pipeline_ = NULL;
  isparallel_ = false;
  originalid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MessageTaskDeliver::~MessageTaskDeliver() {
  // @@protoc_insertion_point(destructor:MessageTaskDeliver)
  SharedDtor();
}

void MessageTaskDeliver::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (originalid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete originalid_;
  }
  if (this != default_instance_) {
    delete pipeline_;
  }
}

void MessageTaskDeliver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MessageTaskDeliver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageTaskDeliver_descriptor_;
}

const MessageTaskDeliver& MessageTaskDeliver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MessageTaskDeliver_2eproto();
  return *default_instance_;
}

MessageTaskDeliver* MessageTaskDeliver::default_instance_ = NULL;

MessageTaskDeliver* MessageTaskDeliver::New() const {
  return new MessageTaskDeliver;
}

void MessageTaskDeliver::Clear() {
  if (_has_bits_[0 / 32] & 113) {
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_pipeline()) {
      if (pipeline_ != NULL) pipeline_->::MessagePipeline::Clear();
    }
    isparallel_ = false;
    if (has_originalid()) {
      if (originalid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        originalid_->clear();
      }
    }
  }
  resources_.Clear();
  input_.Clear();
  servants_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MessageTaskDeliver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MessageTaskDeliver)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_resources;
        break;
      }

      // repeated string resources = 2;
      case 2: {
        if (tag == 18) {
         parse_resources:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_resources()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resources(this->resources_size() - 1).data(),
            this->resources(this->resources_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "resources");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_resources;
        if (input->ExpectTag(26)) goto parse_input;
        break;
      }

      // repeated string input = 3;
      case 3: {
        if (tag == 26) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_input()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->input(this->input_size() - 1).data(),
            this->input(this->input_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "input");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_input;
        if (input->ExpectTag(34)) goto parse_servants;
        break;
      }

      // repeated string servants = 4;
      case 4: {
        if (tag == 34) {
         parse_servants:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_servants()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->servants(this->servants_size() - 1).data(),
            this->servants(this->servants_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "servants");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_servants;
        if (input->ExpectTag(42)) goto parse_pipeline;
        break;
      }

      // required .MessagePipeline pipeline = 5;
      case 5: {
        if (tag == 42) {
         parse_pipeline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pipeline()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_isParallel;
        break;
      }

      // required bool isParallel = 6;
      case 6: {
        if (tag == 48) {
         parse_isParallel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isparallel_)));
          set_has_isparallel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_originalID;
        break;
      }

      // required string originalID = 7;
      case 7: {
        if (tag == 58) {
         parse_originalID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_originalid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->originalid().data(), this->originalid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "originalid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MessageTaskDeliver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MessageTaskDeliver)
  return false;
#undef DO_
}

void MessageTaskDeliver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MessageTaskDeliver)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // repeated string resources = 2;
  for (int i = 0; i < this->resources_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->resources(i).data(), this->resources(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "resources");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->resources(i), output);
  }

  // repeated string input = 3;
  for (int i = 0; i < this->input_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->input(i).data(), this->input(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "input");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->input(i), output);
  }

  // repeated string servants = 4;
  for (int i = 0; i < this->servants_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->servants(i).data(), this->servants(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "servants");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->servants(i), output);
  }

  // required .MessagePipeline pipeline = 5;
  if (has_pipeline()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->pipeline(), output);
  }

  // required bool isParallel = 6;
  if (has_isparallel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isparallel(), output);
  }

  // required string originalID = 7;
  if (has_originalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->originalid().data(), this->originalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "originalid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->originalid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MessageTaskDeliver)
}

::google::protobuf::uint8* MessageTaskDeliver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageTaskDeliver)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // repeated string resources = 2;
  for (int i = 0; i < this->resources_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resources(i).data(), this->resources(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "resources");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->resources(i), target);
  }

  // repeated string input = 3;
  for (int i = 0; i < this->input_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->input(i).data(), this->input(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "input");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->input(i), target);
  }

  // repeated string servants = 4;
  for (int i = 0; i < this->servants_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->servants(i).data(), this->servants(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "servants");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->servants(i), target);
  }

  // required .MessagePipeline pipeline = 5;
  if (has_pipeline()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->pipeline(), target);
  }

  // required bool isParallel = 6;
  if (has_isparallel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isparallel(), target);
  }

  // required string originalID = 7;
  if (has_originalid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->originalid().data(), this->originalid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "originalid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->originalid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageTaskDeliver)
  return target;
}

int MessageTaskDeliver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required .MessagePipeline pipeline = 5;
    if (has_pipeline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pipeline());
    }

    // required bool isParallel = 6;
    if (has_isparallel()) {
      total_size += 1 + 1;
    }

    // required string originalID = 7;
    if (has_originalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->originalid());
    }

  }
  // repeated string resources = 2;
  total_size += 1 * this->resources_size();
  for (int i = 0; i < this->resources_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->resources(i));
  }

  // repeated string input = 3;
  total_size += 1 * this->input_size();
  for (int i = 0; i < this->input_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->input(i));
  }

  // repeated string servants = 4;
  total_size += 1 * this->servants_size();
  for (int i = 0; i < this->servants_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->servants(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MessageTaskDeliver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MessageTaskDeliver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MessageTaskDeliver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MessageTaskDeliver::MergeFrom(const MessageTaskDeliver& from) {
  GOOGLE_CHECK_NE(&from, this);
  resources_.MergeFrom(from.resources_);
  input_.MergeFrom(from.input_);
  servants_.MergeFrom(from.servants_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_pipeline()) {
      mutable_pipeline()->::MessagePipeline::MergeFrom(from.pipeline());
    }
    if (from.has_isparallel()) {
      set_isparallel(from.isparallel());
    }
    if (from.has_originalid()) {
      set_originalid(from.originalid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MessageTaskDeliver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageTaskDeliver::CopyFrom(const MessageTaskDeliver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageTaskDeliver::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000071) != 0x00000071) return false;

  if (has_pipeline()) {
    if (!this->pipeline().IsInitialized()) return false;
  }
  return true;
}

void MessageTaskDeliver::Swap(MessageTaskDeliver* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    resources_.Swap(&other->resources_);
    input_.Swap(&other->input_);
    servants_.Swap(&other->servants_);
    std::swap(pipeline_, other->pipeline_);
    std::swap(isparallel_, other->isparallel_);
    std::swap(originalid_, other->originalid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MessageTaskDeliver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MessageTaskDeliver_descriptor_;
  metadata.reflection = MessageTaskDeliver_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
